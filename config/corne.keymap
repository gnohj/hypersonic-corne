/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&mt {
    tapping-term-ms = <180>;
    flavor = "tap-preferred";
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <27 28>;
        };

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 35>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <25 26>;
        };
    };

    behaviors {
        left_thumb: left_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <160>;
            hold-trigger-key-positions = <38>;
        };

        right_thumb: right_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <160>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <39>;
        };

        right_pinky: right_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            hold-trigger-key-positions = <11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&lt 3 TAB        &kp Q  &kp W  &kp E     &kp R  &kp T                     &kp Y                         &kp U      &kp I      &kp O    &kp P     &right_pinky LS(LC(LA(LG(ESCAPE)))) ESCAPE
&mt LCTRL GRAVE  &kp A  &kp S  &kp D     &kp F  &kp G                     &kp H                         &kp J      &kp K      &kp L    &kp SEMI  &mt LALT SINGLE_QUOTE
&sk LEFT_SHIFT   &kp Z  &kp X  &kp C     &kp V  &kp B                     &kp N                         &kp M      &kp COMMA  &kp DOT  &kp FSLH  &sk RIGHT_SHIFT
                               &kp LGUI  &mo 1  &left_thumb LALT ENTER    &right_thumb LCTRL BACKSPACE  &kp SPACE  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp POUND     &kp DOLLAR      &kp PERCENT         &kp CARET          &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ENTER
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5              &kp NUMBER_6       &kp N7           &kp N8        &kp N9                &kp N0                 &kp COMMA
&trans  &kp PIPE      &kp UNDER     &kp MINUS     &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp PLUS      &kp EQUAL             &kp BACKSLASH          &kp DOT
                                    &trans        &trans          &trans              &trans             &trans           &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp LA(LS(MINUS))  &kp LG(MINUS)  &none  &none   &none   &none     &kp LG(LA(LEFT))  &kp LG(LEFT)  &kp LG(RIGHT)  &kp LG(LA(RIGHT))  &kp LG(PLUS)  &kp LA(LS(EQUAL))
&none              &none          &none  &none   &none   &none     &kp LEFT          &kp DOWN      &kp UP_ARROW   &kp RIGHT          &none         &kp LG(EQUAL)
&none              &none          &none  &none   &none   &none     &none             &none         &none          &none              &none         &none
                                         &trans  &trans  &trans    &trans            &trans        &trans
            >;
        };

        system {
            bindings = <
&trans          &kp F1  &kp F2      &kp F3      &kp F4         &kp F5    &kp F6  &kp F7                 &kp F8        &kp F9        &kp F10  &trans
&bt BT_CLR_ALL  &none   &kp C_PREV  &kp C_NEXT  &kp C_PP       &none     &none   &kp C_MUTE             &kp C_VOL_DN  &kp C_VOL_UP  &none    &bt BT_NXT
&bt BT_CLR      &none   &none       &none       &none          &none     &none   &none                  &none         &none         &none    &bt BT_PRV
                                    &none       &kp LG(LC(Q))  &none     &none   &kp LG(LS(BACKSPACE))  &none
            >;
        };
    };
};
